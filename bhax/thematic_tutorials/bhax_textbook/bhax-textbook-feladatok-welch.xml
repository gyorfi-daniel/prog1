<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            Valósítsd meg C++-ban és Java-ban az módosított polártranszformációs algoritmust! A matek háttér 
            teljesen irreleváns, csak annyiban érdekes, hogy az algoritmus egy számítása során két normálist
            számol ki, az egyiket elspájzolod és egy további logikai taggal az osztályban jelzed, hogy van vagy
            nincs eltéve kiszámolt szám.
        </para>
        <para>
            Fordítás:
        </para>
        <programlisting><![CDATA[
 g++ polargen.cpp polargen.h polargenteszt.cpp -o polargen
        ]]></programlisting>
        <para>
            Futtatjuk majd ezt kapjuk:
        </para>
        <programlisting><![CDATA[
./polargen
1.52988
0.754152
1.66029
1.39486
-0.958656
0.526459
-0.923094
-0.767898
-0.397263
0.367265

        ]]></programlisting>
        <para>
            Megoldás forrása:<link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/polargen/">https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/polargen/</link>               
        </para>
        <para>
            Javában:
        </para>
        <programlisting><![CDATA[
public class PolárGenerátor {
    
    boolean nincsTárolt = true;
    double tárolt;
    
    public PolárGenerátor() {        
        nincsTárolt = true;        
    }
    
    public double következő() {
        
        if(nincsTárolt) {            
            double u1, u2, v1, v2, w;
            do {
                u1 = Math.random();
                u2 = Math.random();
                
                v1 = 2*u1 - 1;
                v2 = 2*u2 - 1;
                
                w = v1*v1 + v2*v2;                
            } while(w > 1);
            
            double r = Math.sqrt((-2*Math.log(w))/w);
            
            tárolt = r*v2;
            nincsTárolt = !nincsTárolt;
            
            return r*v1;
            
        } else {
            nincsTárolt = !nincsTárolt;
            return tárolt;
        }
    }
    
    public static void main(String[] args) {
        
        PolárGenerátor g = new PolárGenerátor();
        
        for(int i=0; i<10; ++i)
            System.out.println(g.következő());        
    }    
}
        ]]></programlisting>
        <para>
            Az algoritmus matematikai háttere most számunkra lényegtelen, fontos viszont az eljárás azon jellemzője, hogy egy számítási lépés két normális eloszlású számot állít elő, tehát minden páratlanadik meghíváskor nem kell számolnunk, csupán az előző lépés másik számát visszaadnunk. 
            Hogy páros vagy páratlan lépésben hívtuk-e meg a megfelelő számítást elvégző következő() függvényt, a nincsTárolt logikai változóval jelöljük. 
            Igaz értéke azt jelenti, hogy tárolt lebegőpontos változóban el van tárolva a visszaadandó szám. (Jelen tárgyalásunkban a következő() függvényben implementált matematikai eljárás, a módosított polármódszer további tulajdonságai teljesen érdektelenek.)
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#OO_vilag">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#OO_vilag</link> 1.18. példa 
        </para>                
    </section>        

    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
            Jön a 0-1 sorozat, betűnként olvassuk, ha olyan rész jön, ami még "nincs a zsákban", akkor "letörjük és be a zsákba":
        </para>
        <programlisting><![CDATA[
    00011101110 -> 0 00 1 11 01 110
        ]]></programlisting>
        <para>
             A tördelést egy bináris fával könnyen meg tudjuk valósítani:
        </para>
        <programlisting><![CDATA[
               /  
       0             1
   0      1              1 
                       0
        ]]></programlisting>
        <para>
            Fordítás: gcc z.c -o z -std=c99
        </para>
        <programlisting><![CDATA[
> more b.txt
01111001001001000111
> ./z < b.txt
01111001001001000111

------------1(4)
---------1(3)
------1(2)
---------0(3)
------------0(4)
---------------0(5)
---/(1)
---------1(3)
------0(2)
---------0(3)
melyseg=5
        ]]></programlisting>        
        <para>
            Megoldás forrása:<link xlink:href="https://progpater.blog.hu/2011/02/19/gyonyor_a_tomor">https://progpater.blog.hu/2011/02/19/gyonyor_a_tomor</link>                 
        </para>
    </section>        
        
    <section>
        <title>Fabejárás</title>
        <para>
            Járd be az előző (inorder bejárású) fát pre- és posztorder is!
        </para>
        <para>
            A program 'kiir' részéhez tekerünk: <programlisting><![CDATA[void kiir(Csomopont * elem, std::ostream & os)]]></programlisting>
        </para>
        <para>
            Ez a függvény rekurzívan hívja önmagát a függvényen belül. Az ebben a részben található kiir függvény áthelyezésével érhetjük el, hogy in-, post- vagy preorder kiiratást kapjunk.
            A következő három esetben láthatjuk, hogy mely változatok, milyen átrendezéssel jönnek ki.
        </para>
        <para>
            Inorder esetben a fa először kiiratja az 1-es ágat, azután következik a gyökér (/) majd a 0-ás ág:
        </para>
        <programlisting><![CDATA[
    ++melyseg;
   kiir (elem->egyesGyermek (), os);
    for (int i = 0; i < melyseg; ++i)
    os << "---";
    os << elem->getBetu () << "(" << melyseg - 1 << ")" << std::endl;
   kiir (elem->nullasGyermek (), os);
    --melyseg;
    break;
        ]]></programlisting>
        <para>
            Postorder esetben a fa először kiiratja az 1-es ágat, aztán a 0-ás ágat és azután következik a gyökér (/):
        </para>
        <programlisting><![CDATA[    
    ++melyseg;
   kiir (elem->egyesGyermek (), os);
   kiir (elem->nullasGyermek (), os);
    for (int i = 0; i < melyseg; ++i)
    os << "---";
    os << elem->getBetu () << "(" << melyseg - 1 << ")" << std::endl;
    --melyseg;
    break;
            ]]></programlisting>
        <para>
            Preorder esetben a fa először kiiratja az 0-ás ágat, aztán a 1-es ágat és azután következik a gyökér (/):
        </para>
            <programlisting><![CDATA[
    ++melyseg;
    for (int i = 0; i < melyseg; ++i)
    os << "---";
    os << elem->getBetu () << "(" << melyseg - 1 << ")" << std::endl;
   kiir (elem->egyesGyermek (), os);
   kiir (elem->nullasGyermek (), os);
    --melyseg;
    break;
            ]]></programlisting>
         <para>
            Megoldás forrása:                
        </para>
    </section>        
                        
    <section>
    <title>Tag a gyökér</title>
    <para>
        Az LZW algoritmust ültesd át egy C++ osztályba, legyen egy Tree és egy beágyazott Node osztálya. A gyökér csomópont legyen kompozícióban a fával!
    </para>
    <para>
        Megoldás forrása:<link xlink:href="https://github.com/gyorfi-daniel/prog1/blob/master/z3a7.cpp">https://github.com/gyorfi-daniel/prog1/blob/master/z3a7.cpp</link>
    </para>
    <para>
        Az LZW binfa C++ implementációja azzal kezdődik, hogy az egész fát egy
    <emphasis role="strong">LZWBinFa</emphasis>    
osztályba ágyazzuk. Az osztály definíciójába beágyazzuk a fa egy csomópontjának jellemzését, ez lesz a beágyazott Csomopont osztály. Azért ágyazzuk be, mert külön nem szánunk neki szerepet, csak a fa részeként számolunk vele.
    </para>
    <programlisting language="C++">
<![CDATA[
class LZWBinFa { 
    public: 
    LZWBinFa ():fa (&gyoker) {} ~LZWBinFa () 
    { 
    szabadit (gyoker.egyesGyermek ());
    szabadit (gyoker.nullasGyermek ()); 
    }
]]>
    </programlisting>
    <para>
        Ebben az osztályban a fa gyökere nem pointer, hanem a '/' betűt tartalmazó objektum; a fa viszont már pointer, mindig az épülő LZW-fa azon csomópontjára mutat, amit az input feldolgozásakor az LZW algoritmus diktál. Ez a konstruktor annyit csinál, hogy a fa mutatót ráállítja a gyökérre. Tagfüggvényként túlterheljük a <programlisting><![CDATA[<< operátort]]></programlisting>, mert ekkor úgy nyomhatjuk a fába az inputot, hogy
    </para>
    <programlisting><![CDATA[binFa << b]]></programlisting>
    <para>
; ahol a b egy '0' vagy '1'-es karakter. Mivel ezen operátor tagfüggvény, így van rá "értelmezve" az aktuális (this "rejtett paraméterként" kapott ) példány, azaz annak a fának amibe éppen be akarjuk nyomni a b betűt a tagjai ("fa", "gyoker") használhatóak a függvényben.
    </para>
    <programlisting language="C++">
<![CDATA[
void operator<< (char b) { // Mit kell betenni éppen, '0'-t? 
    if (b == '0') { 
    /* Van '0'-s gyermeke az aktuális csomópontnak? megkérdezzük Tőle, a "fa" mutató éppen reá mutat */
    if (!fa->nullasGyermek ())	
    // ha nincs, hát akkor csinálunk 
    { 
    // elkészítjük, azaz páldányosítunk a '0' betű akt. parammal 
    Csomopont *uj = new Csomopont ('0'); 
    // az aktuális csomópontnak, ahol állunk azt üzenjük, hogy 
    // jegyezze már be magának, hogy nullás gyereke mostantól van 
    // küldjük is Neki a gyerek címét: 
    fa->ujNullasGyermek (uj); 
    // és visszaállunk a gyökérre (mert ezt diktálja az alg.) 
    fa = &gyoker; } else	
    // ha van, arra rálépünk   
    { 
    // azaz a "fa" pointer már majd a szóban forgó gyermekre mutat: 
    fa = fa->nullasGyermek (); } } 
    // Mit kell betenni éppen, vagy '1'-et? 
    else { 
    if (!fa->egyesGyermek ()) 
    { 
        Csomopont *uj = new Csomopont ('1'); 
        fa->ujEgyesGyermek (uj); 
        fa = &gyoker; } 
    else 
        { 
            fa = fa->egyesGyermek (); 
        } 
    }
]]>
    </programlisting>
</section>    
                
    <section>
        <title>Mutató a gyökér</title>
        
        <para>
            Írd át az előző forrást, hogy a gyökér csomópont ne kompozícióban, csak aggregációban legyen a 
            fával!
        </para>
        <para>
            Aggregáció: 
        </para>
        <para>
            Rész-egész kapcsolat, a részek fogják alkotni az egészet. Például a kerékpár váz, kerekek, és kormány aggregációja, itt a részek túlélhetik az egészet. Akkor valósul meg ha egy objektumnak része, tulajdona egy másik. A tartalmazó objektum megszünésével a tartalmazott objektum tovább élhet.
        </para>
        <para>
            Kompozíció: 
        </para>
        <para>
            A kompozíció egy speciális aggregáció, itt a rész szorosan hozzátartozik az egészhez, a rész nem éli túl az egészet, példáúl az emberi agy szorosan hozzátartozik az emberhez. Itt a tartalmazott objektum nem lehet egyszerre több objektum része, önmagában nem létezhet, mindig van tartalmazott objektuma és az élettartama azonos a tartalmazó objektuméval, a tartalmazó objektum konstruktora hozza létre és a destruktora törli.  
        </para>

        <para>
  Tehát a jelenlegi objektumunkban a gyökér csomópont kompozícióban van a fával, de ha átírjuk mutatóvá akkor már az agrregációs kapcsolat fog megvalósulni.  
        </para>

        <para>
Átírjuk a gyökeret hogy innentől kezdve mutató legyen.
        </para>
<programlisting language="tex"><![CDATA[
     Csomopont *gyoker;
]]></programlisting>
        <para>
Ezután javítjuk a következő szintaktikai hibákat:
        </para>
<programlisting language="tex"><![CDATA[
        szabadit (gyoker.egyesGyermek ());
        szabadit (gyoker.nullasGyermek ());
]]></programlisting>  
        <para>
Mivel a gyökerünk inentől kezdve pointer ezért a '.' helyett itt a nyíl operátort fogjuk használni ami a pointer által mutatott tagra hivatkozik:
        </para>
<programlisting language="tex"><![CDATA[
        szabadit (gyoker->egyesGyermek ());
        szabadit (gyoker->nullasGyermek ());
]]></programlisting> 
        <para>
Valamint ahol a következő kifejezés szerepelt:
        </para>
<programlisting language="tex"><![CDATA[
     &gyoker
]]></programlisting> 
        <para>
Kitöröljük az előtte lévő 'and' jelet, hiszen a pointer tartalmazza a címét az objektumnak, nem pedig a pointer címére van szükségünk:
        </para>
<programlisting language="tex"><![CDATA[
     gyoker
]]></programlisting> 
        <para>
Valamint a konstruktort átírjuk a következőképpen:
        </para>
<programlisting language="tex"><![CDATA[
    LZWBinFa ()
    {
	gyoker=new Csomopont();
	fa=gyoker;
    }
]]></programlisting> 
        <para>
Itt helyet foglalunk a memóriában, a gyoker által mutatott csomópont számára, valamint a fa mutatót ráállítjuk a gyökérre.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/BorvizRobi/vegyes/blob/master/z3a7mutatogyoker.cpp">https://github.com/BorvizRobi/vegyes/blob/master/z3a7mutatogyoker.cpp</link>
        </para>
        <para>
            Megoldás videó: 
        </para>
    </section>                     

    <section>
        <title>Mozgató szemantika</title>
        <para>
            Írj az előző programhoz mozgató konstruktort és értékadást, a mozgató konstruktor legyen a mozgató
            értékadásra alapozva!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/Mark018/prog1/blob/master/Welch/mozgatas_masolas.cpp">https://gitlab.com/Mark018/prog1/blob/master/Welch/mozgatas_masolas.cpp</link>
        </para>
        <programlisting language="c"><![CDATA[    LZWBinFa & operator= (const LZWBinFa & cp) {
        if(&cp != this)
            rekurzioIndutasa(cp.gyoker);
        return *this;
    };]]></programlisting>
            <para>
                Létrehozunk egy operátort, ami ha nem a gyökeret tartalmazza, akkor lemásolja saját magát.
                A másolás egy rekurzióval végződik, ami a fa minden ágát újra létrehozza egy másik gyökérre.
            </para>
            <programlisting language="c"><![CDATA[    void rekurzioIndutasa(Csomopont csm){
        if(csm.nullasGyermek()){
            fa = &gyoker;
            Csomopont *uj = new Csomopont ('0');
            fa->ujNullasGyermek (uj);
            fa = fa->nullasGyermek();
            std::cout << "GYOKER: nullas van"  << std::endl;
            rekurzioAzAgakon(csm.nullasGyermek());
        }
        if(csm.egyesGyermek()){
            fa = &gyoker;
            Csomopont *uj = new Csomopont ('1');
            fa->ujEgyesGyermek (uj);
            fa = fa->egyesGyermek();
            std::cout << "GYOKER: egyes van"  << std::endl;
            rekurzioAzAgakon(csm.egyesGyermek());
        }
    }
 
    void rekurzioAzAgakon(Csomopont * csm){
        if (csm->nullasGyermek()) {
            std::cout << "====van nullas" << std::endl;
            Csomopont *uj = new Csomopont ('0');
            fa->ujNullasGyermek(uj);
        }
        if (csm->egyesGyermek()){
            std::cout << "====van egyes" << std::endl;
            Csomopont *uj = new Csomopont ('1');
            fa->ujEgyesGyermek(uj);
        }
        Csomopont * nullas = fa->nullasGyermek();
        Csomopont * egyes = fa->egyesGyermek();
        if(nullas){
            fa = nullas;
            rekurzioAzAgakon(csm->nullasGyermek());
        }
        if(egyes){
            fa = egyes;
            rekurzioAzAgakon(csm->egyesGyermek());
        }
    }]]></programlisting>
        <para>
            A rekurzioIndutasa függvény indítja el a rekurziót, ha van nullás gyermeke akkor azon fut tovább, ha van egyes gyermeke akkor arra is meghívásra kerül.
            A fő eljárást maga a rekurzioAzAgakon függvény végzi, ez fut át az összes ágon, és létrehozza az új csomópontokat.
        </para>
        <programlisting language="c"><![CDATA[LZWBinFa binFa2;
    binFa2 = binFa;]]></programlisting>
        <para>
            A másolás már csak az egyenlőség jel operátorral meghívva történik, így az alap binFa átmásolódik a binFa2-be.
        </para>        
    </section>                   

</chapter>                
